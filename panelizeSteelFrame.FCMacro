__Name__ = 'Panelize Steel Frame'
__Comment__ = ''
__Author__ = ''
__Version__ = ''
__Date__ = ''
__License__ = ''
__Web__ = ''
__Wiki__ = ''
__Icon__ = ''
__Help__ = ''
__Status__ = 'Pre-alpha'
__Requires__ = ''
__Communication__ = ''
__Files__ = ''

from importlib import reload
from PySide import QtGui
import funcPanelizer as fP

#Reload in debug mode
reload(fP.tools)



class DialogPanelizer():
	"""
	
	"""
	def __init__(self):		
		self.form = FreeCADGui.PySideUic.loadUi(fP.tools.pathUI)		
		self.form.cancel.clicked.connect(self.cancel)
		self.form.changeFrame.clicked.connect(self.updateFrameSelection)
		self.form.selectFace.clicked.connect(self.getSelectedFace)
		self.form.reusePieces.setChecked(True)		
		self.form.infoFace.setText("")
		self.selection=Gui.Selection.getSelection()
		self.frame=None
		self.face=None
		self.getSteelFrame(self.selection)

		
	#Removes standard buttons from the tasks panel
	def getStandardButtons(self):		
		return int()
	
	def cancel(self):		
		FreeCADGui.Control.closeDialog()
	
	#Get the Steel Frame	
	def getSteelFrame(self,selection):
		if len(selection)==1:
			sel=selection[0]
			#Check some attributes to ensure the selection is a Steel Frame object
			if hasattr(sel,'Windows') and hasattr(sel,'Height') and hasattr(sel,'Height') and hasattr(sel,'Gauge'):
				frameProperties="Label: "+str(sel.Label)
				frameProperties+="\nLength: "+str(sel.Length)
				frameProperties+="\nWindows: "+str(len(sel.Windows))
				self.frame=sel
				self.form.infoFrame.setText(frameProperties)
				self.form.selectFace.setEnabled(True)
			else:
				self.form.infoFrame.setText("Select one Steel Frame")
		else:
			self.form.infoFrame.setText("Select one Steel Frame")
			
	def updateFrameSelection(self):
		"""
		Updates the frame selection
		"""
		try:
			del self.selection
		except:
			pass
		self.enableFormElements(False)
		self.form.selectFace.setEnabled(False)
		self.form.infoFace.setText("")
		self.form.panelize.setEnabled(False)
		self.selection=Gui.Selection.getSelection()
		self.getSteelFrame(self.selection)
	
	def getSelectedFace(self):
		try:
			self.face=Gui.Selection.getSelectionEx()[0].SubObjects[0] #Get the edge or face selected
			faceName=Gui.Selection.getSelectionEx()[0].SubElementNames[0]
			frameLabel=Gui.Selection.getSelection()[0].Label
		except:
			self.form.infoFace.setText("Select a face on \nthe side to panelize.")						
		self.enableFormElements(False)
		if self.face and hasattr(self.face,'ShapeType') and frameLabel==self.frame.Label:
			if self.face.ShapeType=='Face':
				#Checks if the face orientation is the same as the Steel Frame
				vectorWidth=self.frame.Placement.Rotation.multVec(FreeCAD.Vector(0,1,0)) #Vector defining the orientation along the Width
				faceNormal=self.face.normalAt(0,0) #Normal vector
				tolerance=FreeCAD.Units.MilliMetre*1e-3
				
				if faceNormal.cross(vectorWidth).isEqual(FreeCAD.Vector(0,0,0),tolerance): #Checks collinearity between the normal vector a vectorWidth
					self.form.infoFace.setText(faceName)
					self.enableFormElements(True)
				else:
					self.form.infoFace.setText('That\'s not a possible side')
			else:
				self.form.infoFace.setText('Select a face \non the side to panelize.')
		else:
			self.form.infoFace.setText('Select a face \non the side to panelize.')
	
	def enableFormElements(self,flag):
		self.form.offsetSup.setEnabled(flag)
		self.form.offsetBottom.setEnabled(flag)
		self.form.offsetLeft.setEnabled(flag)
		self.form.offsetRight.setEnabled(flag)
		self.form.offsetWindows.setEnabled(flag)
		self.form.offsetJoints.setEnabled(flag)
		self.form.reusePieces.setEnabled(flag)
		self.form.panelize.setEnabled(flag)


###Dialog is created as an instance of the DialogPanelizer class and put into the Tasks Panel
dialog = DialogPanelizer() 

if not FreeCAD.ActiveDocument:
	FreeCAD.Console.PrintError("No active document.\n")
else:
	if FreeCADGui.Control.activeDialog()==False:
		FreeCADGui.Control.showDialog(dialog)
	else:
		flags = QtGui.QMessageBox.StandardButton.Yes
		flags |= QtGui.QMessageBox.StandardButton.No
		cerrar = QtGui.QMessageBox.question(None,
						  "Question",
						   "There are dialogs open in the Tasks Panel.\n Do you want to close them?",
							flags)
		if cerrar== QtGui.QMessageBox.Yes:
			FreeCADGui.Control.closeDialog()
			FreeCADGui.Control.showDialog(dialog)
		else:
			FreeCAD.Console.PrintMessage("Panelizer not executed.\n")



